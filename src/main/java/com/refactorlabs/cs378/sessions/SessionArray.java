/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.refactorlabs.cs378.sessions;

import org.apache.avro.specific.SpecificData;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class SessionArray extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5176912017250223770L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"SessionArray\",\"namespace\":\"com.refactorlabs.cs378.sessions\",\"fields\":[{\"name\":\"sessions\",\"type\":{\"type\":\"array\",\"items\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.util.List<java.lang.CharSequence> sessions;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public SessionArray() {}

  /**
   * All-args constructor.
   * @param sessions The new value for sessions
   */
  public SessionArray(java.util.List<java.lang.CharSequence> sessions) {
    this.sessions = sessions;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return sessions;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: sessions = (java.util.List<java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'sessions' field.
   * @return The value of the 'sessions' field.
   */
  public java.util.List<java.lang.CharSequence> getSessions() {
    return sessions;
  }

  /**
   * Sets the value of the 'sessions' field.
   * @param value the value to set.
   */
  public void setSessions(java.util.List<java.lang.CharSequence> value) {
    this.sessions = value;
  }

  /**
   * Creates a new SessionArray RecordBuilder.
   * @return A new SessionArray RecordBuilder
   */
  public static com.refactorlabs.cs378.sessions.SessionArray.Builder newBuilder() {
    return new com.refactorlabs.cs378.sessions.SessionArray.Builder();
  }

  /**
   * Creates a new SessionArray RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new SessionArray RecordBuilder
   */
  public static com.refactorlabs.cs378.sessions.SessionArray.Builder newBuilder(com.refactorlabs.cs378.sessions.SessionArray.Builder other) {
    return new com.refactorlabs.cs378.sessions.SessionArray.Builder(other);
  }

  /**
   * Creates a new SessionArray RecordBuilder by copying an existing SessionArray instance.
   * @param other The existing instance to copy.
   * @return A new SessionArray RecordBuilder
   */
  public static com.refactorlabs.cs378.sessions.SessionArray.Builder newBuilder(com.refactorlabs.cs378.sessions.SessionArray other) {
    return new com.refactorlabs.cs378.sessions.SessionArray.Builder(other);
  }

  /**
   * RecordBuilder for SessionArray instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<SessionArray>
    implements org.apache.avro.data.RecordBuilder<SessionArray> {

    private java.util.List<java.lang.CharSequence> sessions;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.refactorlabs.cs378.sessions.SessionArray.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.sessions)) {
        this.sessions = data().deepCopy(fields()[0].schema(), other.sessions);
        fieldSetFlags()[0] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing SessionArray instance
     * @param other The existing instance to copy.
     */
    private Builder(com.refactorlabs.cs378.sessions.SessionArray other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.sessions)) {
        this.sessions = data().deepCopy(fields()[0].schema(), other.sessions);
        fieldSetFlags()[0] = true;
      }
    }

    /**
      * Gets the value of the 'sessions' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getSessions() {
      return sessions;
    }

    /**
      * Sets the value of the 'sessions' field.
      * @param value The value of 'sessions'.
      * @return This builder.
      */
    public com.refactorlabs.cs378.sessions.SessionArray.Builder setSessions(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.sessions = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'sessions' field has been set.
      * @return True if the 'sessions' field has been set, false otherwise.
      */
    public boolean hasSessions() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'sessions' field.
      * @return This builder.
      */
    public com.refactorlabs.cs378.sessions.SessionArray.Builder clearSessions() {
      sessions = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    @Override
    public SessionArray build() {
      try {
        SessionArray record = new SessionArray();
        record.sessions = fieldSetFlags()[0] ? this.sessions : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  private static final org.apache.avro.io.DatumWriter
    WRITER$ = new org.apache.avro.specific.SpecificDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  private static final org.apache.avro.io.DatumReader
    READER$ = new org.apache.avro.specific.SpecificDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
